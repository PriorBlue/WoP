var ws = require( 'websocket.io' );var _ = require( 'lodash' );var wares = require( './Wares.js' );var buildings = require( './Buildings.js' );var buildingsList = buildings.generateList();var server = ws.listen( 3000 );var connections = [];var market = wares.createForMarket();var worldBuildings = [];function guid() {	function s4() {		return Math.floor( (1 + Math.random()) * 0x10000 )			.toString( 16 )			.substring( 1 );	}	return s4() + s4() + '-' + s4() + '-' + s4() + '-' +		s4() + '-' + s4() + s4() + s4();};var addNewPlayer = function ( connection ) {	connection.player = {		id   : guid(),		money: 20000,		wares: wares.createForPlayer()	};	connections.push( connection );};var addBuildings = function ( player ) {	var randomList = buildings.randomList( 3 );	_.each( randomList, function ( building ) {		var building = _.find( buildingsList, { name: building } );		building.owner = player.id;		worldBuildings.push( building );	} );	updateBuildings();};var sendToAll = function ( message ) {	_.each( connections, function ( client ) {		client.send( JSON.stringify( message ) );	} )};var send = function ( client, message ) {	client.send( JSON.stringify( message ) );};var updateBuildings = function () {	var response = { msg: 'getBuildings', data: worldBuildings };	sendToAll( response );};var updateMoney = function ( client ) {	var response = { msg: 'money', data: client.player.money };	send( client, response );};var updateMarket = function (client) {	var response = {		msg : 'getMarket',		data: _.merge( client.player.wares, market )	};	client.send( JSON.stringify( response ) );};var updateMarketAll = function () {	_.each( connections, function ( client ) {		var response = {			msg : 'getMarket',			data: _.merge( client.player.wares, market )		};		client.send( JSON.stringify( response ) );	} )};//var eventActivateBuilding = function ( client, buildingName ) {	var building = _.find( worldBuildings, { owner: client.player.id, name: buildingName } );	if (building) building.active = true;};var eventDeactivateBuilding = function ( client, buildingName ) {	var building = _.find( worldBuildings, { owner: client.player.id, name: buildingName } );	if (building) building.active = false;};var eventSell = function ( client, wareId , amount) {	var marketWare = _.find( market, { id: wareId } );	var playerWare = _.find( client.player.wares, { id: wareId } );	if (playerWare.stock > 1 + amount) {		playerWare.stock -= amount;		marketWare.stock += amount;		client.player.money += marketWare.priceSell * amount;		updateMarketAll();		updateMoney( client );	}};var eventBuy = function ( client, wareId,amount) {	var marketWare = _.find( market, { id: wareId } );	var playerWare = _.find( client.player.wares, { id: wareId } );	if (marketWare.stock > 1+amount) {		playerWare.stock += amount;		marketWare.stock -= amount;		client.player.money -= marketWare.priceBuy *amount;		updateMarketAll();		updateMoney( client );	}};var eventBuild = function ( client, request ) {	var building = _.find( buildingsList, { name: request.name} );	if (client.player.money > building.constructionCost) {		client.player.money -= building.constructionCost;		building.owner = player.id;		building.positionX = request.positionX;		building.positionY = request.positionY;		var buildingExists = _.find(worldBuildings,{positionX : request.positionX, positionY : request.positionY});		if (!buildingExists) {			worldBuildings.push( building );			updateBuildings();		}	}};server.on( 'connection', function ( client ) {	addNewPlayer( client );	addBuildings( client.player );	updateMoney( client );	updateMarket( client );	client.on( 'message', function ( a ) {		var buf = new Buffer( a );		var request = JSON.parse( buf.toString().replace( /'/g, '"' ) );		var response = {};		console.log( request );		if (!request.msg) {			response.msg = 'error: msg is missing';			client.send( JSON.stringify( response ) );		} else {			try {				switch (request.msg) {					case 'sell1':					case 'sell10':					case 'sell100':						eventSell( client, request.data, parseInt( request.msg.replace( 'sell', '' ) ) );						break;					case 'buy1':					case 'buy10':					case 'buy100':						eventBuy( client, request.data, parseInt( request.msg.replace( 'buy', '' ) ) );						break;					case 'build':						eventBuild( client, request.data );						break;				}			} catch(e) {				console.log(e, e.stack);			}		}	} );	client.on( 'close', function () {		console.log( 'client left' );	} );} );